- name: Create complete three-tier AWS infrastructure with NAT and route table associations
  hosts: localhost
  connection: local
  gather_facts: no

  collections: 
    - amazon.aws
  vars:
    region: ap-south-1
    vpc_cidr: "10.0.8.0/22"
    vpc_name: "ansible-three-tier"
    instance_type: t2.micro
    ami_id: ami-0e35ddab05955cf57
    key_folder: "{{ lookup('env', 'HOME') }}/ansible-keys"
    frontend_key_name: frontend-key
    backend_key_name: backend-key
    database_key_name: database-key
    frontend_name: managed-frontend-instance
    backend_name: managed-backend-instance
    database_name: managed-database-instance

  tasks:

    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ region }}"
        tags:
          Name: "{{ vpc_name }}"
      register: vpc_info

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc_info.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "IGW-{{ vpc_name }}"
      register: igw

    - name: Create Elastic IP for NAT
      amazon.aws.ec2_eip:
        region: "{{ region }}"
        in_vpc: true
        state: present
      register: nat_eip

    - name: Create Public Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_info.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: "public-route-table"
      register: public_rt

    - name: Add route to IGW in public route table
      amazon.aws.ec2_vpc_route_table:
        region: "{{ region }}"
        route_table_id: "{{ public_rt.route_table.id }}"
        destination_cidr_block: "0.0.0.0/0"
        gateway_id: "{{ igw.gateway_id }}"

    - name: Create Private Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_info.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: "private-route-table"
      register: private_rt

    - name: Create Subnets
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc_info.vpc.id }}"
        region: "{{ region }}"
        map_public: true
        cidr: "10.0.8.0/24"
        az: "ap-south-1a"
        tags: { Name: "public-subnet-1" }
      register: public_subnet_1

    - amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc_info.vpc.id }}"
        region: "{{ region }}"
        map_public: true
        cidr: "10.0.9.0/24"
        az: "ap-south-1b"
        tags: { Name: "public-subnet-2" }
      register: public_subnet_2

    - amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc_info.vpc.id }}"
        region: "{{ region }}"
        map_public: false
        cidr: "10.0.10.0/24"
        az: "ap-south-1a"
        tags: { Name: "private-subnet-1" }
      register: private_subnet_1

    - amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc_info.vpc.id }}"
        region: "{{ region }}"
        map_public: false
        cidr: "10.0.11.0/24"
        az: "ap-south-1b"
        tags: { Name: "private-subnet-2" }
      register: private_subnet_2

    - name: Set subnet facts
      ansible.builtin.set_fact:
        public_subnet_1_id: "{{ public_subnet_1.subnet.id }}"
        public_subnet_2_id: "{{ public_subnet_2.subnet.id }}"
        private_subnet_1_id: "{{ private_subnet_1.subnet.id }}"
        private_subnet_2_id: "{{ private_subnet_2.subnet.id }}"

    - name: Create NAT Gateway in public subnet
      amazon.aws.ec2_vpc_nat_gateway:
        subnet_id: "{{ public_subnet_1_id }}"
        region: "{{ region }}"
        allocation_id: "{{ nat_eip.allocation_id }}"
        state: present
        tags:
          Name: "nat-gateway"
      register: nat_gw

    - name: Add route via NAT in private route table
      amazon.aws.ec2_vpc_route_table:
        region: "{{ region }}"
        route_table_id: "{{ private_rt.route_table.id }}"
        destination_cidr_block: "0.0.0.0/0"
        nat_gateway_id: "{{ nat_gw.nat_gateway_id }}"

    - name: Associate public subnets with public route table
      amazon.aws.ec2_vpc_route_table_association:
        subnet_id: "{{ public_subnet_1_id }}"
        route_table_id: "{{ public_rt.route_table.id }}"
        region: "{{ region }}"
    - amazon.aws.ec2_vpc_route_table_association:
        subnet_id: "{{ public_subnet_2_id }}"
        route_table_id: "{{ public_rt.route_table.id }}"
        region: "{{ region }}"

    - name: Associate private subnets with private route table
      amazon.aws.ec2_vpc_route_table_association:
        subnet_id: "{{ private_subnet_1_id }}"
        route_table_id: "{{ private_rt.route_table.id }}"
        region: "{{ region }}"
    - amazon.aws.ec2_vpc_route_table_association:
        subnet_id: "{{ private_subnet_2_id }}"
        route_table_id: "{{ private_rt.route_table.id }}"
        region: "{{ region }}"

    - name: Create Security Group for frontend
      amazon.aws.ec2_group:
        name: frontend-sg
        description: "Allow HTTP and SSH"
        vpc_id: "{{ vpc_info.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
        tags:
          Name: frontend-sg
      register: frontend_sg

    - name: Create Security Group for backend
      amazon.aws.ec2_group:
        name: backend-sg
        description: "Allow SSH and internal app access"
        vpc_id: "{{ vpc_info.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "10.0.8.0/22"
          - proto: tcp
            from_port: 8000
            to_port: 8000
            cidr_ip: "10.0.8.0/22"
        tags:
          Name: backend-sg
      register: backend_sg

    - name: Create Security Group for database
      amazon.aws.ec2_group:
        name: database-sg
        description: "Allow MySQL and SSH"
        vpc_id: "{{ vpc_info.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 3306
            to_port: 3306
            cidr_ip: "10.0.8.0/22"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "10.0.8.0/22"
        tags:
          Name: database-sg
      register: database_sg

    - name: Ensure key folder exists
      ansible.builtin.file:
        path: "{{ key_folder }}"
        state: directory
        mode: '0700'

    - name: Generate and register SSH key for database
      community.crypto.openssh_keypair:
        path: "{{ key_folder }}/{{ database_key_name }}"
        type: rsa
        size: 2048
        state: present
      register: database_keypair

    - name: Upload key pair to AWS
      amazon.aws.ec2_key:
        name: "{{ database_key_name }}"
        region: "{{ region }}"
        key_material: "{{ database_keypair.public_key }}"
        state: present

    - name: Launch database instance
      amazon.aws.ec2_instance:
        name: "{{ database_name }}"
        region: "{{ region }}"
        key_name: "{{ database_key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        vpc_subnet_id: "{{ private_subnet_2_id }}"
        group_id: "{{ database_sg.group_id }}"
        wait: yes
        tags:
          Name: "{{ database_name }}"
      register: database_instance

    - name: Generate SSH key for backend
      community.crypto.openssh_keypair:
        path: "{{ key_folder }}/{{ backend_key_name }}"
        type: rsa
        size: 2048
        state: present
      register: backend_keypair

    - name: Upload backend key
      amazon.aws.ec2_key:
        name: "{{ backend_key_name }}"
        region: "{{ region }}"
        key_material: "{{ backend_keypair.public_key }}"
        state: present

    - name: Launch backend instance
      amazon.aws.ec2_instance:
        name: "{{ backend_name }}"
        region: "{{ region }}"
        key_name: "{{ backend_key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        vpc_subnet_id: "{{ private_subnet_1_id }}"
        group_id: "{{ backend_sg.group_id }}"
        wait: yes
        tags:
          Name: "{{ backend_name }}"
      register: backend_instance

    - name: Generate SSH key for frontend
      community.crypto.openssh_keypair:
        path: "{{ key_folder }}/{{ frontend_key_name }}"
        type: rsa
        size: 2048
        state: present
      register: frontend_keypair

    - name: Upload frontend key
      amazon.aws.ec2_key:
        name: "{{ frontend_key_name }}"
        region: "{{ region }}"
        key_material: "{{ frontend_keypair.public_key }}"
        state: present

    - name: Launch frontend instance
      amazon.aws.ec2_instance:
        name: "{{ frontend_name }}"
        region: "{{ region }}"
        key_name: "{{ frontend_key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        vpc_subnet_id: "{{ public_subnet_1_id }}"
        group_id: "{{ frontend_sg.group_id }}"
        wait: yes
        tags:
          Name: "{{ frontend_name }}"
      register: frontend_instance

    - name: Output frontend instance public IP
      debug:
        msg:
          - "Frontend Instance Name: {{ frontend_name }}"
          - "Public IP: {{ frontend_instance.instances[0].public_ip_address }}"
          - "SSH Key Path: {{ key_folder }}/{{ frontend_key_name }}"
